//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "native")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    pub name: Option<String>,
    pub sex: bool,
    pub year: i32,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
    #[sea_orm(column_type = "Double")]
    pub tz: f64,
    pub st: bool,
    #[sea_orm(unique)]
    pub geo_id: u32,
    #[sea_orm(column_type = "Text", nullable)]
    pub describe: Option<String>,
    pub user_id: u32,
    pub create_date: DateTime,
    pub last_update_date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::geo::Entity",
        from = "Column::GeoId",
        to = "super::geo::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Geo,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::geo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Geo.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
